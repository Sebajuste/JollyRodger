[gd_scene load_steps=9 format=2]

[ext_resource path="res://scenes/objects/Ocean/Ocean.gd" type="Script" id=1]
[ext_resource path="res://assets/3d/waterplane/waterplane_ultra.obj" type="ArrayMesh" id=2]
[ext_resource path="res://scenes/objects/Ocean/ocean2.material" type="Material" id=3]
[ext_resource path="res://scenes/objects/Ocean/NetSyncOcean.gd" type="Script" id=4]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 800, 800 )
subdivide_width = 24
subdivide_depth = 24

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D flow_texture : hint_black;

uniform float forward_offset = 1.5;
uniform float forward_fadeoff = 0.001;
uniform float flow_strength = 1.0;
uniform float flow_randomize = 0.2;
uniform float flow_random_speed = 0.5;
uniform float blur_strength = 0.02;
uniform float blur_offset = 1.0;
uniform float curl_strength = 0.6;
uniform float curl_offset = 7.0;
uniform vec2 shift_vector = vec2(0.02, 0.03);
uniform float shift_speed = 1.5;

uniform bool reset = false;

// GET VECTOR MAP DELTA FOR HEIGHT MAP GENERATION
float get_delta(sampler2D tex, vec2 uv, float offset) {
	float pyt = 0.707107;
	
	vec2 m = texture(tex, uv).xy;
	
	vec2 p1 = texture(tex, fract( uv + vec2(0.0, -offset) ) ).xy;
	vec2 p2 = texture(tex, fract( uv + vec2(offset, 0.0) ) ).xy;
	vec2 p3 = texture(tex, fract( uv + vec2(0.0, offset) ) ).xy;
	vec2 p4 = texture(tex, fract( uv + vec2(-offset, 0.0) ) ).xy;
	vec2 p5 = texture(tex, fract( uv + vec2(offset, -offset) * pyt ) ).xy;
	vec2 p6 = texture(tex, fract( uv + vec2(offset, offset) * pyt ) ).xy;
	vec2 p7 = texture(tex, fract( uv + vec2(-offset, offset) * pyt ) ).xy;
	vec2 p8 = texture(tex, fract( uv + vec2(-offset, -offset) * pyt ) ).xy;
	
	return ( length(m - p1) + length(m - p2) + length(m - p3) + length(m - p4) + length(m - p5) + length(m - p6) + length(m - p7) + length(m - p8) ) * 0.125;
}

vec2 get_average(sampler2D buffer, vec2 uv, float offset) {
	float pyt = 0.707107;
	
	vec2 p1 = texture(buffer, fract( uv + vec2(0.0, -offset) ) ).xy;
	vec2 p2 = texture(buffer, fract( uv + vec2(offset, 0.0) ) ).xy;
	vec2 p3 = texture(buffer, fract( uv + vec2(0.0, offset) ) ).xy;
	vec2 p4 = texture(buffer, fract( uv + vec2(-offset, 0.0) ) ).xy;
	vec2 p5 = texture(buffer, fract( uv + vec2(-offset, -offset) * pyt ) ).xy;
	vec2 p6 = texture(buffer, fract( uv + vec2(offset, -offset) * pyt ) ).xy;
	vec2 p7 = texture(buffer, fract( uv + vec2(offset, offset) * pyt ) ).xy;
	vec2 p8 = texture(buffer, fract( uv + vec2(-offset, offset) * pyt ) ).xy;
	
	return (p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8) / 8.0;
}

vec2 get_forward(sampler2D buffer, vec2 uv, float offset, float fadeout) {
	float forward_fadeout = 0.414 - fadeout; //0.414 default
	float pyt = 0.707107;
	
	vec2 p1 = texture(buffer, fract( uv + vec2(0.0, -offset) ) ).xy - 0.5;
	vec2 p2 = texture(buffer, fract( uv + vec2(offset, -offset) * pyt ) ).xy - 0.5;
	vec2 p3 = texture(buffer, fract( uv + vec2(offset, 0.0) ) ).xy - 0.5;
	vec2 p4 = texture(buffer, fract( uv + vec2(offset, offset) * pyt) ).xy - 0.5;
	vec2 p5 = texture(buffer, fract( uv + vec2(0.0, offset) ) ).xy - 0.5;
	vec2 p6 = texture(buffer, fract( uv + vec2(-offset, offset) * pyt) ).xy - 0.5;
	vec2 p7 = texture(buffer, fract( uv + vec2(-offset, 0.0) ) ).xy - 0.5;
	vec2 p8 = texture(buffer, fract( uv + vec2(-offset, -offset) * pyt) ).xy - 0.5;
	
	vec2 middle = vec2(0.0, 0.0);
	
	middle.y += clamp(dot(p1, vec2(0.0, 1.0)) * forward_fadeout, 0.0, 1.0);
	middle.y += clamp(dot(p2, vec2(-pyt, pyt) ) * forward_fadeout, 0.0, 1.0);
	middle.y += clamp(dot(p8, vec2(pyt, pyt) ) * forward_fadeout, 0.0, 1.0);
	
	middle.x -= clamp(dot(p2, vec2(-pyt, pyt) ) * forward_fadeout, 0.0, 1.0);
	middle.x -= clamp(dot(p3, vec2(-1.0, 0.0)) * forward_fadeout, 0.0, 1.0);
	middle.x -= clamp(dot(p4, vec2(-pyt, -pyt) ) * forward_fadeout, 0.0, 1.0);
	
	middle.y -= clamp(dot(p4, vec2(-pyt, -pyt) ) * forward_fadeout, 0.0, 1.0);
	middle.y -= clamp(dot(p5, vec2(0.0, -1.0)) * forward_fadeout, 0.0, 1.0);
	middle.y -= clamp(dot(p6, vec2(pyt, -pyt) ) * forward_fadeout, 0.0, 1.0);
	
	middle.x += clamp(dot(p6, vec2(pyt, -pyt) ) * forward_fadeout, 0.0, 1.0);
	middle.x += clamp(dot(p7, vec2(1.0, 0.0)) * forward_fadeout, 0.0, 1.0);
	middle.x += clamp(dot(p8, vec2(pyt, pyt) ) * forward_fadeout, 0.0, 1.0);
	
	return middle;
}

vec2 get_curl(sampler2D buffer, vec2 uv, float offset) {
	vec2 middle = vec2(0.0, 0.0);
	float pyt = 0.707107;
	
	vec2 p1 = texture(buffer, fract( uv + vec2(0.0, -offset) ) ).xy - 0.5;
	vec2 p2 = texture(buffer, fract( uv + vec2(0.0, -offset * 2.0) ) ).xy - 0.5;
	vec2 p3 = texture(buffer, fract( uv + vec2(offset, 0.0) ) ).xy - 0.5;
	vec2 p4 = texture(buffer, fract( uv + vec2(offset * 2.0, 0.0) ) ).xy - 0.5;
	vec2 p5 = texture(buffer, fract( uv + vec2(0.0, offset) ) ).xy - 0.5;
	vec2 p6 = texture(buffer, fract( uv + vec2(0.0, offset * 2.0) ) ).xy - 0.5;
	vec2 p7 = texture(buffer, fract( uv + vec2(-offset, 0.0) ) ).xy - 0.5;
	vec2 p8 = texture(buffer, fract( uv + vec2(-offset * 2.0, 0.0) ) ).xy - 0.5;
	
	vec2 p9 = texture(buffer, fract( uv + vec2(offset, -offset) * pyt ) ).xy - 0.5;
	vec2 p10 = texture(buffer, fract( uv + vec2(offset * 2.0, -offset * 2.0) * pyt ) ).xy - 0.5;
	vec2 p11 = texture(buffer, fract( uv + vec2(offset, offset) * pyt ) ).xy - 0.5;
	vec2 p12 = texture(buffer, fract( uv + vec2(offset * 2.0, offset * 2.0) * pyt ) ).xy - 0.5;
	vec2 p13 = texture(buffer, fract( uv + vec2(-offset, offset) * pyt ) ).xy - 0.5;
	vec2 p14 = texture(buffer, fract( uv + vec2(-offset * 2.0, offset * 2.0) * pyt ) ).xy - 0.5;
	vec2 p15 = texture(buffer, fract( uv + vec2(-offset, -offset) * pyt ) ).xy - 0.5;
	vec2 p16 = texture(buffer, fract( uv + vec2(-offset * 2.0, -offset * 2.0) * pyt ) ).xy - 0.5;
	
	middle += ( (p1 - p2) + (p3 - p4) + (p5 - p6) + (p7 - p8) + (p9 - p10) + (p11 - p12) + (p13 - p14) + (p15 - p16) ) * 0.005;
	
	return middle;
}

void fragment() {
	vec2 uv = UV;
	vec2 uv_shifted = fract( uv + vec2(sin(TIME * shift_speed) * shift_vector.x * 0.01, cos(TIME * shift_speed * 0.97231) * shift_vector.y * 0.01) );
	
	// creation of vector map based on the buffer
	vec2 flow_pixel = vec2(0.5, 0.5);
	flow_pixel += get_forward(TEXTURE, uv_shifted, forward_offset / 1024.0, forward_fadeoff);
	flow_pixel += get_curl(TEXTURE, uv_shifted, curl_offset / 1024.0) * curl_strength;
	flow_pixel = flow_pixel * (1.0 - blur_strength) + get_average(TEXTURE, uv_shifted, blur_offset / 1024.0) * blur_strength;
	
	// texture input flow direction (RED, GREEN), flow strength (BLUE)
	vec3 flow_source = texture(flow_texture, uv).xyz;
	float flow_source_overlay = texture(flow_texture, fract( uv + vec2(TIME * 0.0121, TIME * 0.0372))).z;
	
	// random input controlled by shader params	
	vec2 flow_random = vec2( sin(uv.x * 6.25 + TIME * flow_random_speed) * 0.5 + 0.5, cos(uv.y * 6.25 + TIME * flow_random_speed) * 0.5 + 0.5 );
	// flow strength modifier controlled by shader params
	flow_source.z = flow_source.z * flow_source_overlay * clamp(flow_strength, 0.0, 1.0);
	// random input applied to vector map with texture input
	flow_source.xy = flow_source.xy * (1.0 - flow_randomize) + flow_random * flow_randomize;
	
	float height = ( get_delta(TEXTURE, uv, 0.0009765625) + get_delta(TEXTURE, uv, 0.001953125) + get_delta(TEXTURE, uv, 0.00390625) + get_delta(TEXTURE, uv, 0.0078125) + get_delta(TEXTURE, uv, 0.015625) + get_delta(TEXTURE, uv, 0.03125) + get_delta(TEXTURE, uv, 0.0625) );
	
	if (reset == true) {
		COLOR = vec4(0.5, 0.5, 0.0, 1.0);
	}
	else {
		COLOR = vec4((flow_source.xy * flow_source.z) + flow_pixel * (1.0 - flow_source.z), height , 1.0);
	}
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/forward_offset = 1.5
shader_param/forward_fadeoff = 0.001
shader_param/flow_strength = 1.0
shader_param/flow_randomize = 0.2
shader_param/flow_random_speed = 0.5
shader_param/blur_strength = 0.02
shader_param/blur_offset = 1.0
shader_param/curl_strength = 0.6
shader_param/curl_offset = 7.0
shader_param/shift_vector = Vector2( 0.02, 0.03 )
shader_param/shift_speed = 1.5
shader_param/reset = false

[sub_resource type="ViewportTexture" id=4]
viewport_path = NodePath("Viewport")

[node name="Ocean" type="Spatial" groups=[
"water_mesh",
]]
script = ExtResource( 1 )
wave_direction = Vector2( 1, 0 )
wind_strength = 0.7

[node name="Meshes" type="Spatial" parent="."]

[node name="MeshInstance" type="MeshInstance" parent="Meshes"]
material_override = ExtResource( 3 )
cast_shadow = 0
mesh = ExtResource( 2 )
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -800 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance3" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -800, 0, -800 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance4" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -800, 0, 0 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance5" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -800, 0, 800 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance6" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 800 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance7" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 800, 0, 800 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance8" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 800, 0, 0 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="MeshInstance9" type="MeshInstance" parent="Meshes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 800, 0, -800 )
material_override = ExtResource( 3 )
mesh = SubResource( 1 )
material/0 = null

[node name="NetNodeSync" type="Node" parent="."]
script = ExtResource( 4 )
replication_enabled = false

[node name="Timer" type="Timer" parent="NetNodeSync"]
process_mode = 0

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1024, 1024 )
hdr = false
disable_3d = true
usage = 0
render_target_v_flip = true
render_target_clear_mode = 2
render_target_update_mode = 3

[node name="TextureRect" type="TextureRect" parent="Viewport"]
material = SubResource( 3 )
margin_right = 40.0
margin_bottom = 40.0
texture = SubResource( 4 )
expand = true

[connection signal="timeout" from="NetNodeSync/Timer" to="NetNodeSync" method="sync_ocean"]
